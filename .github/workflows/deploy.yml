name: deploy

on:
  workflow_dispatch:
    inputs:
      limit:
        description: "Ansible limit (host/group/pattern), e.g. nl-ams-1 or mask_nodes"
        required: false
        default: ""
      check:
        description: "Dry-run (--check --diff)"
        required: false
        type: boolean
        default: false

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      INV: deploy/ansible/inventory.ini
      LIMIT: ${{ inputs.limit }}
      CHECK: ${{ inputs.check }}
      ANSIBLE_FORCE_COLOR: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install deps (ansible, linters, tools)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq rsync
          python -m pip install --upgrade pip
          pip install "ansible-core>=2.16,<2.18" ansible-lint yamllint

      # Ключ подключаем через ssh-agent (без записи на диск)
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # Пишем SSH config из секрета: здесь заданы Host алиасы, HostName/IP, Port, ProxyJump (если нужен)
      - name: Write SSH config from secret
        shell: bash
        run: |
          mkdir -p ~/.ssh
          umask 077
          cat > ~/.ssh/config <<'EOF'
          ${{ secrets.SSH_CONFIG }}
          EOF
          chmod 600 ~/.ssh/config

      # Принять host keys для всех алиасов из inventory (работает и с ProxyJump)
      - name: Accept host keys for all inventory hosts (via SSH aliases)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t HOSTS < <(ansible -i "$INV" mask_nodes --list-hosts | tail -n +2 | xargs -n1)
          for h in "${HOSTS[@]}"; do
            echo ">>> Accepting host key for $h"
            ssh -q \
              -o StrictHostKeyChecking=accept-new \
              -o BatchMode=yes \
              -o ConnectTimeout=5 \
              "$h" 'exit 0' || true
          done
          test -f ~/.ssh/known_hosts && chmod 600 ~/.ssh/known_hosts || true

      - name: (Optional) Lint
        run: |
          ansible-lint deploy/ansible/playbook.yml || true
          ansible-lint deploy/ansible/check_status.yml || true
          yamllint deploy/ansible || true

      - name: Show inputs
        run: |
          echo "LIMIT='${LIMIT}'"
          echo "CHECK='${CHECK}'"
          
      - name: Debug | ssh -G (effective config)
        run: ssh -G nl-ams-1 | sed -n '1,200p'        

      - name: Debug | ssh -vvv test
        run: |
            ssh -vvv -o BatchMode=yes -o ConnectTimeout=10 nl-ams-1 'echo OK from $(hostname) && id' || true        

      - name: Dry-run deploy (check+diff)
        if: env.CHECK == 'true'
        run: |
          ansible-playbook -i "$INV" deploy/ansible/playbook.yml --check --diff ${LIMIT:+-l $LIMIT}

      - name: Real deploy
        if: env.CHECK != 'true'
        run: |
          ansible-playbook -i "$INV" deploy/ansible/playbook.yml ${LIMIT:+-l $LIMIT}

      - name: Post-deploy status
        if: success()
        run: |
          ansible-playbook -i "$INV" deploy/ansible/check_status.yml ${LIMIT:+-l $LIMIT}
